#include <GibbsSamplerND.h>
#include <ImageAsND.h>
#include <NDImageDrawer.h>
#include <Logger.h>
#include <NDSampler.h>
#include <cmath>

Eigen::VectorXd EstimateU(const std::vector<Eigen::VectorXd>& vs){
    std::cout << "Estimating avg" << std::endl;
    Eigen::VectorXd m = Eigen::VectorXd::Zero(vs[0].rows());
    for (const auto& v : vs) {
        m += v;
    }
    std::cout << "Done Estimating avg" << std::endl;
    return m / vs.size();
}

Eigen::MatrixXd EstimateS(const std::vector<Eigen::VectorXd>& vs, const Eigen::VectorXd& u) {
    std::cout << "Estimating sigma" << std::endl;
    Eigen::MatrixXd m = Eigen::ArrayXXd::Zero(vs[0].rows(), vs[0].rows());
    // std::vector<Eigen::MatrixXd> sigmas(vs.size());
    // std::transform(std::execution::par, vs.begin(), vs.end(), sigmas.begin(), [&u] (const auto& v) {
    //     return (v - u) * (v - u).transpose(); 
    // });
    // const auto m = std::reduce(std::execution::par, sigmas.begin(), sigmas.end());
    size_t count = 0;
    for (const auto& v : vs) {
        if (count++ % 10000 == 0)
            std::cout << count - 1 << std::endl;
        m += (v - u) * (v - u).transpose();
    }
    // std::cout << "Done Estimating sigma" << std::endl;
    return m / (vs.size() - 1);
}

int main() {
    // std::cout << (-1 % 5) << std::endl;
    const auto image = cv::imread("../images/grass_dark.jpg", cv::IMREAD_COLOR);
    // cv::imshow("result", image);
    // cv::waitKey();

    // Eigen::MatrixXd s(27, 27);
    // s << 1.0015425427588964, 0.9799860070968487, 0.9209471548253328, 0.5064314420899404, 0.4970635847950017, 0.40109091011949155, 0.24450608751668948, 0.24045356376563465, 0.13366962495093077, 0.44884556190772124, 0.4438117748299147, 0.33367521800192423, 0.3248219317748433, 0.3222784946285187, 0.20811115766960794, 0.25379793141970863, 0.25175455767492483, 0.1422655153271034, 0.16925502755488614, 0.17097921108443734, 0.050357454048215504, 0.21768015723076045, 0.2178778441248814, 0.10422476051375147, 0.23141150111459174, 0.23038375715310896, 0.12550033929359097, 0.9799860070968487, 0.9976035040030574, 0.8756878324515918, 0.4990924763689318, 0.5264793988076795, 0.3726123874008331, 0.24432907978473342, 0.27482024617866185, 0.1146259792858444, 0.4391257725446143, 0.4703995006122204, 0.30484927647832316, 0.31977530319409125, 0.35209433051511463, 0.18482833260090079, 0.25132694516925586, 0.2823916298603523, 0.1229187451545325, 0.16306182239144823, 0.19829501708540712, 0.029441976650856277, 0.21203665717537087, 0.24474884992280452, 0.08397260184402054, 0.22670571179233853, 0.2568728887938294, 0.10674320825033823, 0.9209471548253328, 0.8756878324515918, 1.0048694531549056, 0.3956196413664527, 0.36562461490077486, 0.40869599062884016, 0.12364299675157586, 0.10157629845696155, 0.11385715827729731, 0.3430693476132546, 0.3171701905888467, 0.3414496988662259, 0.21066650864729625, 0.18872833214814885, 0.19807895201201586, 0.14144400562965964, 0.12184705857205347, 0.12261181299486175, 0.06615354693544741, 0.049964422535321996, 0.0383864450072221, 0.11415080717881357, 0.09713017350415559, 0.08728212479782536, 0.13147660245753776, 0.11436771682605858, 0.10473370527785379, 0.5064314420899404, 0.4990924763689318, 0.3956196413664527, 1.002064434660439, 0.98079699427229, 0.9210009152518528, 0.5070567522719825, 0.497967775662845, 0.4012179954583807, 0.32742385106187705, 0.32599099526345565, 0.20723651360618178, 0.4496738978634824, 0.44492695682988176, 0.33404799352759956, 0.32564446849805345, 0.3233869592793018, 0.20848232802752864, 0.2019154219914389, 0.20295491931984158, 0.08712621378012457, 0.17002659376657367, 0.17203517217401834, 0.0507198159361865, 0.21849636107321466, 0.21897466802741958, 0.10464963611053699, 0.4970635847950017, 0.5264793988076795, 0.36562461490077486, 0.98079699427229, 0.9987989301257064, 0.8759209859847167, 0.5000359940021235, 0.5277982862353208, 0.3729476450126913, 0.31948417919312005, 0.3528119153669492, 0.18181470055857463, 0.44020367911463903, 0.4718533953716854, 0.3053749641680565, 0.3209189358700919, 0.35361439959937285, 0.18541819694426873, 0.19344730311158323, 0.22678292717654946, 0.06511696099480642, 0.1640708940400587, 0.19966572230735602, 0.02996419717805947, 0.21318701316024885, 0.24625731676349408, 0.08464412580283222, 0.40109091011949155, 0.3726123874008331, 0.40869599062884016, 0.9210009152518528, 0.8759209859847167, 1.0047381145639682, 0.39579627002986134, 0.3659732708414195, 0.4086662525495558, 0.2235551111721056, 0.20239787214503105, 0.2068938770666804, 0.3434508348717567, 0.3177418296687509, 0.34161605588179117, 0.21107071701498323, 0.18932226848552527, 0.19824592470860047, 0.10760380366311566, 0.0914936281137637, 0.07737634589033565, 0.06652227655494401, 0.05053827180124387, 0.03848137959957638, 0.11458352813226992, 0.0977642452111769, 0.0874359459514649, 0.24450608751668948, 0.24432907978473342, 0.12364299675157586, 0.5070567522719825, 0.5000359940021235, 0.39579627002986134, 1.0026955557086958, 0.9817461673157611, 0.9212141792267697, 0.25557472237900586, 0.25560071417936825, 0.13988961367967456, 0.32805918004943224, 0.3269383238158668, 0.20741274612022514, 0.45052165061825133, 0.44608337127796516, 0.3344659693782823, 0.21745243393092242, 0.2175366873603903, 0.11176258279226157, 0.20264186760283792, 0.20398195434593458, 0.08740876675105261, 0.1710576537396413, 0.17335467751015052, 0.0513246286099499, 0.24045356376563465, 0.27482024617866185, 0.10157629845696155, 0.497967775662845, 0.5277982862353208, 0.3659732708414195, 0.9817461673157611, 1.000164796157222, 0.8763398071198008, 0.24805302770390136, 0.2809925163864235, 0.11692709959173966, 0.320365350752284, 0.35409616127199395, 0.1821434376934743, 0.44136837680024016, 0.4734180433666085, 0.30600807934329755, 0.20721195666711098, 0.2380801377419967, 0.08943830097170963, 0.1944040548235977, 0.2281189077987581, 0.06555751883606849, 0.16542545378467047, 0.2013870273274162, 0.030809637192416865, 0.13366962495093077, 0.1146259792858444, 0.11385715827729731, 0.4012179954583807, 0.3729476450126913, 0.4086662525495558, 0.9212141792267697, 0.8763398071198008, 1.0047914497317012, 0.15687941315842083, 0.13898678426261657, 0.13222950416495624, 0.22376197448017243, 0.20281447175985357, 0.20686316138787467, 0.3439092609813791, 0.3184054067803266, 0.3418500041904952, 0.13260434422837714, 0.11683161537494345, 0.10223572919099656, 0.1079705360388564, 0.09207939809392031, 0.07741508350011535, 0.06716879889539422, 0.05139189234558969, 0.038797499195395754, 0.44884556190772124, 0.4391257725446143, 0.3430693476132546, 0.32742385106187705, 0.31948417919312005, 0.2235551111721056, 0.25557472237900586, 0.24805302770390136, 0.15687941315842083, 1.0024751939561491, 0.9810158052331537, 0.9216312165348951, 0.5077096810210682, 0.4984192393284273, 0.40222973235242837, 0.24538478741435427, 0.24140342205124185, 0.1344576919203347, 0.44968284750389376, 0.44477834657880505, 0.3342481545692974, 0.3252821489182379, 0.32286333177966803, 0.20841425697885643, 0.25418804673438594, 0.2522524618666588, 0.14258195347275138, 0.4438117748299147, 0.4703995006122204, 0.3171701905888467, 0.32599099526345565, 0.3528119153669492, 0.20239787214503105, 0.25560071417936825, 0.2809925163864235, 0.13898678426261657, 0.9810158052331537, 0.9988170975468421, 0.8763589822538851, 0.5004653399046961, 0.5280053905838616, 0.37373897996977734, 0.24532072813039288, 0.2759445886028737, 0.1154327015885389, 0.4401278586341561, 0.47162610152279616, 0.3054661677689869, 0.32039958432181165, 0.35293024693827096, 0.1851794874002919, 0.25189182190616527, 0.2831363731542472, 0.12330786352162726, 0.33367521800192423, 0.30484927647832316, 0.3414496988662259, 0.20723651360618178, 0.18181470055857463, 0.2068938770666804, 0.13988961367967456, 0.11692709959173966, 0.13222950416495624, 0.9216312165348951, 0.8763589822538851, 1.0053166005203071, 0.39668028257767557, 0.36666485270836874, 0.40960323347729194, 0.12439324583020515, 0.10231553148062429, 0.1144557168070028, 0.3436658183244855, 0.3177689026547642, 0.3418503881041029, 0.2109765875222778, 0.18904662572428244, 0.19826937672567663, 0.14177359676799597, 0.12218406241351046, 0.12287069817761609, 0.3248219317748433, 0.31977530319409125, 0.21066650864729625, 0.4496738978634824, 0.44020367911463903, 0.3434508348717567, 0.32805918004943224, 0.320365350752284, 0.22376197448017243, 0.5077096810210682, 0.5004653399046961, 0.39668028257767557, 1.0030022433382721, 0.9818354562524054, 0.921686239816304, 0.5083402767240519, 0.4993322183417334, 0.4023584290582035, 0.32844512816120885, 0.32713514102676006, 0.2080534295717981, 0.4505086828232097, 0.4458935761709273, 0.3346137699039215, 0.32610474019023244, 0.32397432459780934, 0.20878103919739543, 0.3222784946285187, 0.35209433051511463, 0.18872833214814885, 0.44492695682988176, 0.4718533953716854, 0.3177418296687509, 0.3269383238158668, 0.35409616127199395, 0.20281447175985357, 0.4984192393284273, 0.5280053905838616, 0.36666485270836874, 0.9818354562524054, 1.0000260266978325, 0.876595500588623, 0.5014183457540329, 0.5293385813409496, 0.3740787696412043, 0.3206763615949511, 0.3542118994133351, 0.18269250549245178, 0.441207777778845, 0.4730858062396789, 0.30598816603505036, 0.3215476782738967, 0.35445850318060884, 0.18576837053637268, 0.20811115766960794, 0.18482833260090079, 0.19807895201201586, 0.33404799352759956, 0.3053749641680565, 0.34161605588179117, 0.20741274612022514, 0.1821434376934743, 0.20686316138787467, 0.40222973235242837, 0.37373897996977734, 0.40960323347729194, 0.921686239816304, 0.876595500588623, 1.0051836599364143, 0.3968592174276328, 0.3670178863175723, 0.40957330622939053, 0.2243598311559093, 0.2032055156312314, 0.20751697549890646, 0.34404309112743114, 0.3183374745897062, 0.3420089711072563, 0.21137820841911953, 0.18963907439433447, 0.19843030120688931, 0.25379793141970863, 0.25132694516925586, 0.14144400562965964, 0.32564446849805345, 0.3209189358700919, 0.21107071701498323, 0.45052165061825133, 0.44136837680024016, 0.3439092609813791, 0.24538478741435427, 0.24532072813039288, 0.12439324583020515, 0.5083402767240519, 0.5014183457540329, 0.3968592174276328, 1.003636189173945, 0.9827917286305818, 0.921899109009764, 0.2563105579941857, 0.2564741008706838, 0.14049482739845756, 0.32907731855931166, 0.328082708083812, 0.20822287434085263, 0.4513564905015631, 0.44705332938783543, 0.3350285142132867, 0.25175455767492483, 0.2823916298603523, 0.12184705857205347, 0.3233869592793018, 0.35361439959937285, 0.18932226848552527, 0.44608337127796516, 0.4734180433666085, 0.3184054067803266, 0.24140342205124185, 0.2759445886028737, 0.10231553148062429, 0.4993322183417334, 0.5293385813409496, 0.3670178863175723, 0.9827917286305818, 1.0014045565603964, 0.8770169062133812, 0.24894745318900463, 0.2820923066338501, 0.11760044381619265, 0.3215589264036539, 0.35550214061374186, 0.18301791477452017, 0.442376937104386, 0.47465942832502545, 0.30662142282903015, 0.1422655153271034, 0.1229187451545325, 0.12261181299486175, 0.20848232802752864, 0.18541819694426873, 0.19824592470860047, 0.3344659693782823, 0.30600807934329755, 0.3418500041904952, 0.1344576919203347, 0.1154327015885389, 0.1144557168070028, 0.4023584290582035, 0.3740787696412043, 0.40957330622939053, 0.921899109009764, 0.8770169062133812, 1.0052346224797322, 0.15745497371568837, 0.13959651902193332, 0.13265040456142294, 0.22456193981481884, 0.20361950485420457, 0.20747912800057042, 0.34449913887340794, 0.3190007482086943, 0.34223843386993336, 0.16925502755488614, 0.16306182239144823, 0.06615354693544741, 0.2019154219914389, 0.19344730311158323, 0.10760380366311566, 0.21745243393092242, 0.20721195666711098, 0.13260434422837714, 0.44968284750389376, 0.4401278586341561, 0.3436658183244855, 0.32844512816120885, 0.3206763615949511, 0.2243598311559093, 0.2563105579941857, 0.24894745318900463, 0.15745497371568837, 1.0028946023728038, 0.9816528832870506, 0.9217057884344682, 0.5083348497357817, 0.49925761371947935, 0.4025918945131802, 0.2460788962818688, 0.24229246886378789, 0.13501082077137422, 0.17097921108443734, 0.19829501708540712, 0.049964422535321996, 0.20295491931984158, 0.22678292717654946, 0.0914936281137637, 0.2175366873603903, 0.2380801377419967, 0.11683161537494345, 0.44477834657880505, 0.47162610152279616, 0.3177689026547642, 0.32713514102676006, 0.3542118994133351, 0.2032055156312314, 0.2564741008706838, 0.2820923066338501, 0.13959651902193332, 0.9816528832870506, 0.9997860618733657, 0.876511668513712, 0.5012895077008287, 0.5291451117369788, 0.3741707431589672, 0.24621929615754198, 0.27712150350247255, 0.11607990230472129, 0.050357454048215504, 0.029441976650856277, 0.0383864450072221, 0.08712621378012457, 0.06511696099480642, 0.07737634589033565, 0.11176258279226157, 0.08943830097170963, 0.10223572919099656, 0.3342481545692974, 0.3054661677689869, 0.3418503881041029, 0.2080534295717981, 0.18269250549245178, 0.20751697549890646, 0.14049482739845756, 0.11760044381619265, 0.13265040456142294, 0.9217057884344682, 0.876511668513712, 1.00516941813191, 0.39706329421076414, 0.36713473117546946, 0.40981081997156615, 0.12495002985089841, 0.10295812213740063, 0.11490487756482422, 0.21768015723076045, 0.21203665717537087, 0.11415080717881357, 0.17002659376657367, 0.1640708940400587, 0.06652227655494401, 0.20264186760283792, 0.1944040548235977, 0.1079705360388564, 0.3252821489182379, 0.32039958432181165, 0.2109765875222778, 0.4505086828232097, 0.441207777778845, 0.34404309112743114, 0.32907731855931166, 0.3215589264036539, 0.22456193981481884, 0.5083348497357817, 0.5012895077008287, 0.39706329421076414, 1.0034232169555213, 0.9824772778230941, 0.9217618707360056, 0.5089667784598297, 0.500175110849562, 0.40272171260995093, 0.2178778441248814, 0.24474884992280452, 0.09713017350415559, 0.17203517217401834, 0.19966572230735602, 0.05053827180124387, 0.20398195434593458, 0.2281189077987581, 0.09207939809392031, 0.32286333177966803, 0.35293024693827096, 0.18904662572428244, 0.4458935761709273, 0.4730858062396789, 0.3183374745897062, 0.328082708083812, 0.35550214061374186, 0.20361950485420457, 0.49925761371947935, 0.5291451117369788, 0.36713473117546946, 0.9824772778230941, 1.0010039633475407, 0.8767512859432872, 0.5022469791368599, 0.530487005002563, 0.3745136842068495, 0.10422476051375147, 0.08397260184402054, 0.08728212479782536, 0.0507198159361865, 0.02996419717805947, 0.03848137959957638, 0.08740876675105261, 0.06555751883606849, 0.07741508350011535, 0.20841425697885643, 0.1851794874002919, 0.19826937672567663, 0.3346137699039215, 0.30598816603505036, 0.3420089711072563, 0.20822287434085263, 0.18301791477452017, 0.20747912800057042, 0.4025918945131802, 0.3741707431589672, 0.40981081997156615, 0.9217618707360056, 0.8767512859432872, 1.0050385542285454, 0.39724166519115606, 0.3674892883773158, 0.4097815377528981, 0.23141150111459174, 0.22670571179233853, 0.13147660245753776, 0.21849636107321466, 0.21318701316024885, 0.11458352813226992, 0.1710576537396413, 0.16542545378467047, 0.06716879889539422, 0.25418804673438594, 0.25189182190616527, 0.14177359676799597, 0.32610474019023244, 0.3215476782738967, 0.21137820841911953, 0.4513564905015631, 0.442376937104386, 0.34449913887340794, 0.2460788962818688, 0.24621929615754198, 0.12495002985089841, 0.5089667784598297, 0.5022469791368599, 0.39724166519115606, 1.004058894868004, 0.9834384031914999, 0.9219748396139678, 0.23038375715310896, 0.2568728887938294, 0.11436771682605858, 0.21897466802741958, 0.24625731676349408, 0.0977642452111769, 0.17335467751015052, 0.2013870273274162, 0.05139189234558969, 0.2522524618666588, 0.2831363731542472, 0.12218406241351046, 0.32397432459780934, 0.35445850318060884, 0.18963907439433447, 0.44705332938783543, 0.47465942832502545, 0.3190007482086943, 0.24229246886378789, 0.27712150350247255, 0.10295812213740063, 0.500175110849562, 0.530487005002563, 0.3674892883773158, 0.9834384031914999, 1.0023915208139327, 0.8771748510712829, 0.12550033929359097, 0.10674320825033823, 0.10473370527785379, 0.10464963611053699, 0.08464412580283222, 0.0874359459514649, 0.0513246286099499, 0.030809637192416865, 0.038797499195395754, 0.14258195347275138, 0.12330786352162726, 0.12287069817761609, 0.20878103919739543, 0.18576837053637268, 0.19843030120688931, 0.3350285142132867, 0.30662142282903015, 0.34223843386993336, 0.13501082077137422, 0.11607990230472129, 0.11490487756482422, 0.40272171260995093, 0.3745136842068495, 0.4097815377528981, 0.9219748396139678, 0.8771748510712829, 1.0050892974201822;

    // Eigen::VectorXd u = Eigen::VectorXd::Constant(27, 0.0);
    // Eigen::VectorXd vs(27);
    // vs << 72.842, 109.207, 37.7793, 74.5113, 110.89, 36.39, 65.2017, 102.108, 28.605, 61.1542, 97.762, 25.9386, 65.0559, 101.599, 28.6877, 60.1053, 97.2639, 24.5263, 56.805, 93.1673, 20.7402, 61.7925, 97.9234, 26.1888, 69.0835, 105.868, 32.9;
    // std::array<double, 3> us = {60.94715569, 98.27298802, 26.253};
    // for (size_t i = 0; i < 9; ++i) {
    //     vs[i * 3] -= us[0];
    //     vs[i * 3 + 1] -= us[1];
    //     vs[i * 3 + 2] -= us[2];
    // }
    // std::array<double, 3> stds = {29.27578179, 30.15633032, 23.83153467};
    // for (size_t i = 0; i < 9; ++i) {
    //     vs[i * 3] /= stds[0];
    //     vs[i * 3 + 1] /= stds[1];
    //     vs[i * 3 + 2] /= stds[2];
    // }


    // std::cout << u << std::endl; 
    // const auto pos = 9 / 2;
    // NDSampler sampler(nd);
    // samp



    // GibbsSamplerND sampler({.nd = {.u = u, .s = s}, .iter = 0});
    // // for (size_t x = 0; x < 10; ++x) {
    //     sampler.SampleWithVals(vs, pos);
    // }

    // 
    // std::vector<Eigen::VectorXd> sampled;
    // for (size_t i = 0; i < 10000; ++i) {
    //     const auto val = sampler.SampleWithVals(vs, pos);
    //     for (size_t c = 0; c < 3; ++c) {
    //         vs(3 * pos + c) = val(c);
    //     }
    //     sampled.push_back(val);
    // }
    // 
    // const auto u_est = EstimateU(sampled);
    // const auto s_est = EstimateS(sampled, u_est);
    // std::cout << u_est << std::endl;
    // std::cout << s_est << std::endl;
    // 

    std::vector<NormalDist> nds;
    const Tiling tiling = {.r_w = 4, .r_h = 4};

    ImageAsND img_to_nd(image, tiling);
    nds.push_back(img_to_nd.ComputeND());
    
    const auto image2 = cv::imread("../images/grass.jpeg", cv::IMREAD_COLOR);
    ImageAsND img_to_nd2(image2, tiling);
    nds.push_back(img_to_nd2.ComputeND());
    // for (auto& nd : nds) {
    //     auto& s = nd.s;
    //     for (long i = 0; i < s.rows(); ++i) {
    //         for (long j = 0; j < s.cols(); ++j) {
    //             const auto pos_h_i = i / 3 / 3;
    //             const auto pos_h_j = j / 3 / 3;
    //             const auto pos_w_i = (i / 3) % 3;
    //             const auto pos_w_j = (j / 3) % 3;
    //             s(i, j) /= std::exp(std::max(std::abs(pos_h_i - pos_h_j), std::abs(pos_w_i - pos_w_j)) * 0.3);
    //         }
    //     }
    // }
    
    // std::cout << nds[1].s << std::endl;
    // std::cout << std::endl;
    // for (size_t i = 0; i < 9; ++i) {
    //     std::cout << "i: " << i << " (" <<  nds[1].s(3, i * 3) <<  ")" << " ";
    // }
    // std::cout << std::endl;
    // for (long int i = 0; i < 27; ++i) {
    //     for (long int j = 0; j < 27; ++j) {
    //         if (nds[1].s(i, j) !=  nds[1].s(i, j))
    //             std::cout << nds[1].s(i, j) << " " << nds[1].s(j, i) << std::endl;
    //     }
    // }

    const Rect shape{.w = 180, .h = 180};
    std::vector<std::vector<std::vector<double>>> blend(shape.h, std::vector<std::vector<double>>(shape.w, 
                                                        std::vector<double>(2)));
    for (size_t i = 0; i < shape.h; ++i) {
        for (size_t j = 0; j < shape.w; ++j) {
            for (size_t b = 0; b < 10; ++b) {
                if (i < shape.h / 10 * (b + 1) && i >= shape.h / 10 * (b)) {
                    std::cout << i << " " << b << std::endl;
                    blend[i][j][0] = 1.0 - ((double) (b) / 10.0);
                    blend[i][j][1] = (double) (b) / 10.0;
                    // blend[i][j][0] = 1.0;
                    // blend[i][j][1] = 0.0;
                    // std::cout << blend[i][j][0] << " " << blend[i][j][1] << std::endl;
                }
            }
        }
    }
    
    // std::cout << "[";
    // for (const auto& v : vs) {
    //     std::cout << v << ", ";
    // }
    // std::cout << "]" << std::endl;
    // std::cout << "[";
    // for (size_t i = 0; i < (size_t) nd.s.rows(); ++i) {
    //     const auto& row =  nd.s.row(i);
    //     std::cout << "[";
    //     for (size_t j = 0; j < (size_t) row.cols(); ++j) {
    //         std::cout << row(j);
    //         if (j != (size_t) row.cols() - 1) {
    //             std::cout << ", ";
    //         }
    //     }
    //     std::cout << "]";
    //     if (i != (size_t) nd.s.rows() - 1)
    //         std::cout << ",";
    // }
    // std::cout << "]" << std::endl;
    // 
    // 
    // 
    NDImageDrawer drawer({.nds = nds, .blending_coefs = blend, 
                          .shape = shape, .tiling = tiling});
    const auto img = drawer.Draw(5000);
    // cv::imshow("result", img);
    // cv::waitKey();


    return 0;
}